/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace VybePredictionMarket {
      
    export type BetInfoStruct = {marketId: BigNumberish, betYes: boolean, amount: BigNumberish, claimed: boolean}

    export type BetInfoStructOutput = [marketId: bigint, betYes: boolean, amount: bigint, claimed: boolean] & {marketId: bigint, betYes: boolean, amount: bigint, claimed: boolean }
  
    }

  export interface VybePredictionMarketInterface extends Interface {
    getFunction(nameOrSignature: "buyNo" | "buyYes" | "createMarket" | "getMarket" | "getUserBets" | "getUserShares" | "marketCount" | "oracle" | "owner" | "redeem" | "renounceOwnership" | "resolveMarket" | "setOracle" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BetPlaced" | "MarketCreated" | "OwnershipTransferred" | "Redeemed" | "Resolved"): EventFragment;

    encodeFunctionData(functionFragment: 'buyNo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'buyYes', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createMarket', values: [string, string, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getMarket', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getUserBets', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getUserShares', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'marketCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'oracle', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'resolveMarket', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'setOracle', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'buyNo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'buyYes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createMarket', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getMarket', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserBets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserShares', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'marketCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'resolveMarket', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setOracle', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace BetPlacedEvent {
      export type InputTuple = [marketId: BigNumberish, user: AddressLike, yes: boolean, amount: BigNumberish];
      export type OutputTuple = [marketId: bigint, user: string, yes: boolean, amount: bigint];
      export interface OutputObject {marketId: bigint, user: string, yes: boolean, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace MarketCreatedEvent {
      export type InputTuple = [marketId: BigNumberish, question: string, trackId: string, threshold: BigNumberish, deadline: BigNumberish];
      export type OutputTuple = [marketId: bigint, question: string, trackId: string, threshold: bigint, deadline: bigint];
      export interface OutputObject {marketId: bigint, question: string, trackId: string, threshold: bigint, deadline: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RedeemedEvent {
      export type InputTuple = [marketId: BigNumberish, user: AddressLike, payout: BigNumberish];
      export type OutputTuple = [marketId: bigint, user: string, payout: bigint];
      export interface OutputObject {marketId: bigint, user: string, payout: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ResolvedEvent {
      export type InputTuple = [marketId: BigNumberish, outcomeYes: boolean, yesPool: BigNumberish, noPool: BigNumberish];
      export type OutputTuple = [marketId: bigint, outcomeYes: boolean, yesPool: bigint, noPool: bigint];
      export interface OutputObject {marketId: bigint, outcomeYes: boolean, yesPool: bigint, noPool: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface VybePredictionMarket extends BaseContract {
    
    connect(runner?: ContractRunner | null): VybePredictionMarket;
    waitForDeployment(): Promise<this>;

    interface: VybePredictionMarketInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    buyNo: TypedContractMethod<
      [marketId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    buyYes: TypedContractMethod<
      [marketId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    createMarket: TypedContractMethod<
      [question: string, trackId: string, threshold: BigNumberish, deadline: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    getMarket: TypedContractMethod<
      [marketId: BigNumberish, ],
      [[string, string, bigint, bigint, boolean, boolean, bigint, bigint] & {question: string, trackId: string, threshold: bigint, deadline: bigint, resolved: boolean, outcomeYes: boolean, yesPool: bigint, noPool: bigint }],
      'view'
    >
    

    
    getUserBets: TypedContractMethod<
      [_user: AddressLike, ],
      [VybePredictionMarket.BetInfoStructOutput[]],
      'view'
    >
    

    
    getUserShares: TypedContractMethod<
      [marketId: BigNumberish, user: AddressLike, ],
      [[bigint, bigint] & {yesShares: bigint, noShares: bigint }],
      'view'
    >
    

    
    marketCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    oracle: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    redeem: TypedContractMethod<
      [marketId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    resolveMarket: TypedContractMethod<
      [marketId: BigNumberish, observed: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    setOracle: TypedContractMethod<
      [_oracle: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'buyNo'): TypedContractMethod<
      [marketId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'buyYes'): TypedContractMethod<
      [marketId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'createMarket'): TypedContractMethod<
      [question: string, trackId: string, threshold: BigNumberish, deadline: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getMarket'): TypedContractMethod<
      [marketId: BigNumberish, ],
      [[string, string, bigint, bigint, boolean, boolean, bigint, bigint] & {question: string, trackId: string, threshold: bigint, deadline: bigint, resolved: boolean, outcomeYes: boolean, yesPool: bigint, noPool: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getUserBets'): TypedContractMethod<
      [_user: AddressLike, ],
      [VybePredictionMarket.BetInfoStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getUserShares'): TypedContractMethod<
      [marketId: BigNumberish, user: AddressLike, ],
      [[bigint, bigint] & {yesShares: bigint, noShares: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'marketCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'oracle'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'redeem'): TypedContractMethod<
      [marketId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'resolveMarket'): TypedContractMethod<
      [marketId: BigNumberish, observed: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setOracle'): TypedContractMethod<
      [_oracle: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'BetPlaced'): TypedContractEvent<BetPlacedEvent.InputTuple, BetPlacedEvent.OutputTuple, BetPlacedEvent.OutputObject>;
getEvent(key: 'MarketCreated'): TypedContractEvent<MarketCreatedEvent.InputTuple, MarketCreatedEvent.OutputTuple, MarketCreatedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'Redeemed'): TypedContractEvent<RedeemedEvent.InputTuple, RedeemedEvent.OutputTuple, RedeemedEvent.OutputObject>;
getEvent(key: 'Resolved'): TypedContractEvent<ResolvedEvent.InputTuple, ResolvedEvent.OutputTuple, ResolvedEvent.OutputObject>;

    filters: {
      
      'BetPlaced(uint256,address,bool,uint256)': TypedContractEvent<BetPlacedEvent.InputTuple, BetPlacedEvent.OutputTuple, BetPlacedEvent.OutputObject>;
      BetPlaced: TypedContractEvent<BetPlacedEvent.InputTuple, BetPlacedEvent.OutputTuple, BetPlacedEvent.OutputObject>;
    

      'MarketCreated(uint256,string,string,uint256,uint256)': TypedContractEvent<MarketCreatedEvent.InputTuple, MarketCreatedEvent.OutputTuple, MarketCreatedEvent.OutputObject>;
      MarketCreated: TypedContractEvent<MarketCreatedEvent.InputTuple, MarketCreatedEvent.OutputTuple, MarketCreatedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'Redeemed(uint256,address,uint256)': TypedContractEvent<RedeemedEvent.InputTuple, RedeemedEvent.OutputTuple, RedeemedEvent.OutputObject>;
      Redeemed: TypedContractEvent<RedeemedEvent.InputTuple, RedeemedEvent.OutputTuple, RedeemedEvent.OutputObject>;
    

      'Resolved(uint256,bool,uint256,uint256)': TypedContractEvent<ResolvedEvent.InputTuple, ResolvedEvent.OutputTuple, ResolvedEvent.OutputObject>;
      Resolved: TypedContractEvent<ResolvedEvent.InputTuple, ResolvedEvent.OutputTuple, ResolvedEvent.OutputObject>;
    
    };
  }